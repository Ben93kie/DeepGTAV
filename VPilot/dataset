#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from deepgtav.messages import Start, Stop, Dataset, frame2numpy, Scenario
from deepgtav.client import Client

import argparse
import time
import cv2

width = 1920
height = 1080
index = 0

base_folder = "E:\data\\"

def getText(classID):
    return {
        0: "Car",
        10: "Pedestrian"
    }.get(classID,"DontCare")
    
def printInstances(filename, list):
    text_file = open(filename, "a")
    for instance in list:
        #TODO Determine actual class of vehicle
        text = getText(instance['classID'])
        text_file.write("%s" % text)

        #TODO - Determine if truncated
        text_file.write(" 0.00")

        #TODO - Occlusion
        text_file.write(" 0")
        
        #Observation angle TODO
        text_file.write(" %f" % instance['alpha'])

        #2D Bounding box TODO
        text_file.write(" 0.00")
        text_file.write(" 0.00")
        text_file.write(" 0.00")
        text_file.write(" 0.00")
        
        #3D dimensions
        for num in instance['dimensions']:
            text_file.write(" %f" % num)
        
        #3D location
        for num in instance['location']:
            text_file.write(" %f" % num)
        
        #Rotation_y
        text_file.write(" %f" % instance['rotation_y'])

        # text_file.write(" EOKITTI")

        # for num in instance['FUR']:
        #     text_file.write(" %f" % num)
        # for num in instance['BLL']:
        #     text_file.write(" %f" % num)
        # text_file.write(" %f" % instance['speed'])
        # text_file.write(" %f" % instance['heading'])
        # text_file.write(" %d" % instance['classID'])
        
        # if instance['offscreen']:
        #     text_file.write(" 0")
        # else:
        #     text_file.write(" 1")
        
        text_file.write("\n")
    text_file.close()

def printCalib(filename, focalLen):
    text_file = open(filename, "w")
    for i in range(0,4):
        text_file.write("P%d:" % i)
        text_file.write(" %d 0 %d 0" % (focalLen, width/2))
        text_file.write(" 0 %f %d 0" % (focalLen, height/2))
        text_file.write(" 0 0 1 0\n")

    text_file.write("R0_rect: 1 0 0 0 1 0 0 0 1\n")
    #From KITTI velo to KITTI cam
    text_file.write("Tr_velo_to_cam: 0 -1 0 0 0 0 -1 0 1 0 0 0")

    # From GTA to KITTI
    # text_file.write("Tr_velo_to_cam: 1 0 0 0 0 0 -1 0 0 1 0 0")


# Stores a dataset file with data coming from DeepGTAV
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=None)
    parser.add_argument('-l', '--host', default='localhost', help='The IP where DeepGTAV is running')
    parser.add_argument('-p', '--port', default=8000, help='The port where DeepGTAV is running')
    parser.add_argument('-d', '--dataset_path', default='dataset.pz', help='Place to store the dataset')
    args = parser.parse_args()

    # Creates a new connection to DeepGTAV using the specified ip and port. 
    # If desired, a dataset path and compression level can be set to store in memory all the data received in a gziped pickle file.
    client = Client(ip=args.host, port=args.port, datasetPath=args.dataset_path, compressionLevel=9)
    
    print("Connecting to client...")
    # Configures the information that we want DeepGTAV to generate and send to us. 
    # See deepgtav/messages.py to see what options are supported
    dataset = Dataset(rate=0.5, frame=[width,height], throttle=True, brake=True, steering=True, vehicles=True, peds=True, reward=[15.0, 0.0],
                    direction=None, speed=True, yawRate=True, location=True, time=True, offscreen=False, showBoxes=False)
    # Send the Start request to DeepGTAV.
    scenario = Scenario(drivingMode=[786603,15.0]) # Driving style is set to normal, with a speed of 15.0 mph. All other scenario options are random.
    client.sendMessage(Start(dataset=dataset,scenario=scenario))

    print("Message sent to client to begin.")
    # Start listening for messages coming from DeepGTAV. We do it for 80 hours
    stoptime = time.time() + 80*3600
    while time.time() < stoptime:
        try:
            # We receive a message as a Python dictionary
            message = client.recvMessage()  
            index = message['index']
            
            # The frame is a numpy array and can be displayed using OpenCV or similar       
            image = frame2numpy(message['frame'], (width,height))
            cv2.imwrite("%simages\%06d.png" % (base_folder, index), image)
            
            #Output object detections
            filename = "%slabels\%06d.txt" % (base_folder, index)
            text_file = open(filename, "w")
            text_file.write("")
            text_file.close()
            printInstances(filename, message['vehicles'])
            printInstances(filename, message['peds'])

            #Print calib file
            calib_file = "%scalib\%06d.txt" % (base_folder, index)
            printCalib(calib_file, message['focalLen'])
            
            # cv2.imshow('img',image)
            # cv2.waitKey(-1)
        except KeyboardInterrupt:
            break
            
    # We tell DeepGTAV to stop
    client.sendMessage(Stop())
    client.close()
