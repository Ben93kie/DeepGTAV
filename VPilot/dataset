#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from deepgtav.messages import Start, Stop, Dataset, frame2numpy, Scenario, Config
from deepgtav.client import Client
from deepgtav.export import printInstances, printCalib

import argparse
import time
import cv2

width = 1920
height = 1080
index = 0

base_folder = "E:\\data\\"
collectStationary = True
collectVehicles = True
collectPeds = True

# Stores a dataset file with data coming from DeepGTAV
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=None)
    parser.add_argument('-l', '--host', default='localhost', help='The IP where DeepGTAV is running')
    parser.add_argument('-p', '--port', default=8000, help='The port where DeepGTAV is running')
    default_dataset_path = base_folder + 'dataset.pz'
    parser.add_argument('-d', '--dataset_path', default=default_dataset_path, help='Place to store the dataset')
    args = parser.parse_args()

    # Creates a new connection to DeepGTAV using the specified ip and port. 
    # If desired, a dataset path and compression level can be set to store in memory all the data received in a gziped pickle file.
    client = Client(ip=args.host, port=args.port, datasetPath=args.dataset_path, compressionLevel=9)
    
    print("Connecting to client...")
    # Configures the information that we want DeepGTAV to generate and send to us. 
    # See deepgtav/messages.py to see what options are supported
    # rate is in captures per second
    if collectStationary:
        vehicles = []
        # model, forward, right, heading, color (-1 default, 27 red, 64blue, 0 black)
        vehicles.append(["voltic", 20, 10, 90, 27, 0])
        vehicles.append(["voltic", 15, 10, 90, 64, 0])
        vehicles.append(["benson", 25, 5, 0, 0, 0])
        vehicles.append(["benson", 50, 0, 0, 0, 0])
        vehicles.append(["benson", 80, -15, 0, 0, 0])
        vehicles.append(["benson", 100, -50, 0, 0, 0])
        vehicles.append(["benson", -10, 0, 0, 0, 0])
        peds = []
        peds.append([0, 10, 5, 0])
        peds.append([0, 10, 0, 0])
        peds.append([0, 10, -5, 0])
        dataset = Dataset(rate=1, frame=[width,height], throttle=True, brake=True, steering=True, vehicles=collectVehicles, peds=collectPeds, reward=[15.0, 0.0],
                        direction=None, speed=True, yawRate=True, location=True, time=True, offscreen=True, showBoxes=False, pointclouds=True,
                        stationaryScene=True, vehiclesToCreate=vehicles, pedsToCreate=peds)
        #List of locations
        #Nearplane
        # startLocation = [320.0,3600.0]

        #Diner in mountains
        # startLocation = [2561, 2637, 110]

        # Tracks
        # startLocation = [1041, 53, 340]

        # Airport
        startLocation = [-942, -3500, 45]

        scenario = Scenario(drivingMode=[-1,0], location=startLocation) #Stationary/manual mode
    else:
        dataset = Dataset(rate=60, frame=[width,height], throttle=True, brake=True, steering=True, vehicles=collectVehicles, peds=collectPeds, reward=[15.0, 0.0],
                        direction=None, speed=True, yawRate=True, location=True, time=True, offscreen=False, showBoxes=False, pointclouds=True,
                        stationaryScene=False)
        scenario = Scenario(drivingMode=[786603,15.0]) # Driving style is set to normal, with a speed of 15.0 mph. All other scenario options are random.
    # Send the Start request to DeepGTAV.
    client.sendMessage(Start(dataset=dataset,scenario=scenario))

    # if collectStationary:
    #     stoptime = time.time() + 20
    #     while time.time() < stoptime:
    #         time.sleep(1)

    #     scenario.location = [2000,0]
    #     #scenario = Scenario(location=[1000,0])
    #     print("Sending config message...")
    #     client.sendMessage(Config(dataset=dataset,scenario=scenario))

    print("Message sent to client to begin.")
    # Start listening for messages coming from DeepGTAV. We do it for 80 hours
    stoptime = time.time() + 80*3600
    while time.time() < stoptime:
        try:
            # We receive a message as a Python dictionary
            message = client.recvMessage()  
            index = message['index']
            
            # The frame is a numpy array and can be displayed using OpenCV or similar       
            image = frame2numpy(message['frame'], (width,height))
            cv2.imwrite("%simages\\%06d.png" % (base_folder, index), image)
            
            #Output object detections
            filename = "%slabels\\%06d.txt" % (base_folder, index)
            text_file = open(filename, "w")
            text_file.write("")
            text_file.close()
            if collectVehicles:
                printInstances(filename, message['vehicles'], False)
            if collectPeds:
                printInstances(filename, message['peds'], False)
            
            #Output object detections with augmentations
            filename = "%slabels_aug\\%06d.txt" % (base_folder, index)
            text_file = open(filename, "w")
            text_file.write("")
            text_file.close()
            if collectVehicles:
                printInstances(filename, message['vehicles'], True)
            if collectPeds:
                printInstances(filename, message['peds'], True)

            #Print calib file
            calib_file = "%scalib\\%06d.txt" % (base_folder, index)
            printCalib(calib_file, message['focalLen'], width, height)

            #Output current location:
            filename = "%slocation.txt" % (base_folder)
            text_file = open(filename, "w")
            ownLocation = message['curPosition']
            text_file.write("x: %d, y: %d, z: %d, heading %d" % (ownLocation[0], ownLocation[1], ownLocation[2], ownLocation[3]))
            text_file.close()

        except KeyboardInterrupt:
            break
            
    # We tell DeepGTAV to stop
    client.sendMessage(Stop())
    client.close()
